
spring.data.mongodb:
  host: ${MONGODB_HOST:localhost}
  port: ${MONGODB_PORT:27017}
  database: ${MONGODB_DATABASE:desafio}
  username: ${MONGODB_USERNAME:desafio}
  password: ${MONGODB_PASSWORD:desafio}

springdoc.swagger-ui:
    path: /documentation/swagger-ui.html

jwt:
  # Audience:
  #    With the generated token refers to
  #    The application will reject the token if the token received contains
  #    a different token
  audience: ${TOKEN_AUDIENCE:desafio}
  # Time for token expiration in seconds
  time: ${TOKEN_TIME_EXPIRATION:3600}
  #3600
  # String used for signing token
  # At production, please, define other one
  # See more in https://github.com/jwtk/jjwt#secretkey-formats
  # TODO - Change to KeyPair (private/public keys)
  secret: ${TOKEN_SECRET:please_changeme.9JOfm4jC6VrVbZ4f8HiTz6bSes6TYZ6ZA6PqJ2vxet7BtiKwo4B4EmvuxxKy7ck9ogowBWjqrxNv7hE7}

logging:
  level:
    web: DEBUG
    sql: INFO

    org:
      springframework.web: DEBUG
      springframework:
        security: DEBUG

documentation:
  description: |
    Microservice for managing users and authentication.
    
    ## About Authentication and Authorization
    
    To access the protected endpoints, it's firstly necessary authenticate by informing
    a valid `username` and `password` for [`auth` endpoint](#tag/Authentication/operation/authenticate).
    
    After an successfully call, the `auth` endpoint will returns an `access_token` valid about one hour.
    Use it during requests for protected endpoints:
    ```http
    Authorization: Bearer {{access_token}}
    ```

    ## Sorting and Pagination
    
    Some of the services offer paging. You can define the page and the maximum amount of returned elements:

    * `page=<value>`: Results page you want to retrieve `(0..N]`;
    * `size=<value>`: Maximum number of records per page.

    Example:

    ```curl
    wget 'http://localhost:8080/users?size=15&page=3'
    ```

    Some of the services support sorting. The pattern follows

    ```
    (sort=<parameter>,<order>)*
    ```

    * `<parameter>`: Parameter to be sorted;
    * `<order>`: Order to apply: `asc` for ascending and `desc` for descending.

    The applied order respects the order defined in the url. For example, in 
    ```
    http://localhost:8080/users?sort=fullName,desc&sort=email,desc
    ```
    descending order for `fullName` will be applied before `email`.
